#ifndef _OPDEF_H_
#define _OPDEF_H_

#include "op.h"
#include <chaos/preprocessor.h>

Error run(Mem* m, Code* c);

#define argcGuard(v_, n_) { \
    if (v_->size != (n_)) { \
        return Error_WrongArgCount;\
    } \
}
#define OPCODE_NOP_ARG() (NOARG)

#define OPCODE_MOV_ARG() (PTR)(VALUE)
#define OPCODE_CPY_ARG() (PTR)(PTR)(VALUE)
#define OPCODE_SIZE_ARG() (NOARG)
#define OPCODE_VAR_ARG() (SYM)(PTR)
#define OPCODE_LOC_ARG() (PTR)
#define OPCODE_ALLC_ARG() (VALUE)
#define OPCODE_PUSH_ARG() (PTR)(VALUE)
#define OPCODE_POP_ARG() (PTR)
#define OPCODE_LTOF_ARG() (PTR)
#define OPCODE_FTOL_ARG() (PTR)

#define OPCODE_ADD_ARG() (VALUE)(VALUE)
#define OPCODE_SUB_ARG() (VALUE)(VALUE)
#define OPCODE_MUL_ARG() (VALUE)(VALUE)
#define OPCODE_DIV_ARG() (VALUE)(VALUE)
#define OPCODE_MOD_ARG() (VALUE)(VALUE)
#define OPCODE_INC_ARG() (PTR)
#define OPCODE_DEC_ARG() (PTR)
#define OPCODE_ADDF_ARG() (VALUE)(VALUE)
#define OPCODE_SUBF_ARG() (VALUE)(VALUE)
#define OPCODE_MULF_ARG() (VALUE)(VALUE)
#define OPCODE_DIVF_ARG() (VALUE)(VALUE)
#define OPCODE_INCF_ARG() (PTR)
#define OPCODE_DECF_ARG() (PTR)

#define OPCODE_EQ_ARG() (VALUE)(VALUE)
#define OPCODE_NE_ARG() (VALUE)(VALUE)
#define OPCODE_GT_ARG() (VALUE)(VALUE)
#define OPCODE_LT_ARG() (VALUE)(VALUE)
#define OPCODE_EQF_ARG() (VALUE)(VALUE)
#define OPCODE_NEF_ARG() (VALUE)(VALUE)
#define OPCODE_GTF_ARG() (VALUE)(VALUE)
#define OPCODE_LTF_ARG() (VALUE)(VALUE)

#define OPCODE_AND_ARG() (VALUE)(VALUE)
#define OPCODE_OR_ARG() (VALUE)(VALUE)
#define OPCODE_NOT_ARG() (VALUE)

#define OPCODE_JMP_ARG() (VALUE)
#define OPCODE_JC_ARG() (VALUE)(VALUE)
#define OPCODE_LBL_ARG() (SYM)
#define OPCODE_CALL_ARG() (PTR)(VALUE)
#define OPCODE_RET_ARG() (PTR)

#define OPCODE_SYS_ARG() (VALUE)

#define OPCODE_SRC_ARG() (SYM)
#define OPCODE_PRINT_NUM_ARG() (VALUE)(VALUE)
#define OPCODE_HALT_ARG() (NOARG)

#define ENUM(s, product, data) CHAOS_PP_SEQ_CONCAT(product),

#define GENERATE(m, n, args) \
    CHAOS_PP_EXPR(CHAOS_PP_FOR_EACH_PRODUCT(m, ((CHAOS_PP_SEQ)(n##_))args, ~))

enum Opcode{
    GENERATE(ENUM,OPCODE_NOP,OPCODE_NOP_ARG())

    GENERATE(ENUM,OPCODE_MOV,OPCODE_MOV_ARG())
    GENERATE(ENUM,OPCODE_CPY,OPCODE_CPY_ARG())
    GENERATE(ENUM,OPCODE_SIZE,OPCODE_SIZE_ARG())
    GENERATE(ENUM,OPCODE_VAR,OPCODE_VAR_ARG())
    GENERATE(ENUM,OPCODE_LOC,OPCODE_LOC_ARG())
    GENERATE(ENUM,OPCODE_ALLC,OPCODE_ALLC_ARG())
    GENERATE(ENUM,OPCODE_PUSH,OPCODE_PUSH_ARG())
    GENERATE(ENUM,OPCODE_POP,OPCODE_POP_ARG())
    GENERATE(ENUM,OPCODE_LTOF,OPCODE_LTOF_ARG())
    GENERATE(ENUM,OPCODE_FTOL,OPCODE_FTOL_ARG())
    
    GENERATE(ENUM,OPCODE_ADD,OPCODE_ADD_ARG())
    GENERATE(ENUM,OPCODE_SUB,OPCODE_SUB_ARG())
    GENERATE(ENUM,OPCODE_MUL,OPCODE_MUL_ARG())
    GENERATE(ENUM,OPCODE_DIV,OPCODE_DIV_ARG())
    GENERATE(ENUM,OPCODE_MOD,OPCODE_MOD_ARG())
    GENERATE(ENUM,OPCODE_INC,OPCODE_INC_ARG())
    GENERATE(ENUM,OPCODE_DEC,OPCODE_DEC_ARG())
    GENERATE(ENUM,OPCODE_ADDF,OPCODE_ADDF_ARG())
    GENERATE(ENUM,OPCODE_SUBF,OPCODE_SUBF_ARG())
    GENERATE(ENUM,OPCODE_MULF,OPCODE_MULF_ARG())
    GENERATE(ENUM,OPCODE_DIVF,OPCODE_DIVF_ARG())
    GENERATE(ENUM,OPCODE_INCF,OPCODE_INCF_ARG())
    GENERATE(ENUM,OPCODE_DECF,OPCODE_DECF_ARG())
    
    GENERATE(ENUM,OPCODE_EQ,OPCODE_EQ_ARG())
    GENERATE(ENUM,OPCODE_NE,OPCODE_NE_ARG())
    GENERATE(ENUM,OPCODE_GT,OPCODE_GT_ARG())
    GENERATE(ENUM,OPCODE_LT,OPCODE_LT_ARG())
    GENERATE(ENUM,OPCODE_EQF,OPCODE_EQF_ARG())
    GENERATE(ENUM,OPCODE_NEF,OPCODE_NEF_ARG())
    GENERATE(ENUM,OPCODE_GTF,OPCODE_GTF_ARG())
    GENERATE(ENUM,OPCODE_LTF,OPCODE_LTF_ARG())

    GENERATE(ENUM,OPCODE_AND,OPCODE_AND_ARG())
    GENERATE(ENUM,OPCODE_OR,OPCODE_OR_ARG())
    GENERATE(ENUM,OPCODE_NOT,OPCODE_NOT_ARG())
    
    GENERATE(ENUM,OPCODE_JMP,OPCODE_JMP_ARG())
    GENERATE(ENUM,OPCODE_JC,OPCODE_JC_ARG())
    GENERATE(ENUM,OPCODE_LBL,OPCODE_LBL_ARG())
    GENERATE(ENUM,OPCODE_CALL,OPCODE_CALL_ARG())
    GENERATE(ENUM,OPCODE_RET,OPCODE_RET_ARG())
    
    GENERATE(ENUM,OPCODE_SYS,OPCODE_SYS_ARG())
    
    GENERATE(ENUM,OPCODE_SRC,OPCODE_SRC_ARG())
    GENERATE(ENUM,OPCODE_PRINT_NUM,OPCODE_PRINT_NUM_ARG())
    GENERATE(ENUM,OPCODE_HALT,OPCODE_HALT_ARG())

};

#undef ENUM

#define addEntry(op) { Hashmap_insert(&opIdxTable, CHAOS_PP_STRINGIZE(op), i++); }

#define ADDENTRY(s, product, data) addEntry(CHAOS_PP_SEQ_CONCAT(product))

static inline void
op_initOpTable()
{
    int i = 0;
    GENERATE(ADDENTRY,nop,OPCODE_NOP_ARG())

    GENERATE(ADDENTRY,mov,OPCODE_MOV_ARG())
    GENERATE(ADDENTRY,cpy,OPCODE_CPY_ARG())
    GENERATE(ADDENTRY,size,OPCODE_SIZE_ARG())
    GENERATE(ADDENTRY,var,OPCODE_VAR_ARG())
    GENERATE(ADDENTRY,loc,OPCODE_LOC_ARG())
    GENERATE(ADDENTRY,allc,OPCODE_ALLC_ARG())
    GENERATE(ADDENTRY,push,OPCODE_PUSH_ARG())
    GENERATE(ADDENTRY,pop,OPCODE_POP_ARG())
    GENERATE(ADDENTRY,ltof,OPCODE_LTOF_ARG())
    GENERATE(ADDENTRY,ftol,OPCODE_FTOL_ARG())
    
    GENERATE(ADDENTRY,add,OPCODE_ADD_ARG())
    GENERATE(ADDENTRY,sub,OPCODE_SUB_ARG())
    GENERATE(ADDENTRY,mul,OPCODE_MUL_ARG())
    GENERATE(ADDENTRY,div,OPCODE_DIV_ARG())
    GENERATE(ADDENTRY,mod,OPCODE_MOD_ARG())
    GENERATE(ADDENTRY,inc,OPCODE_INC_ARG())
    GENERATE(ADDENTRY,dec,OPCODE_DEC_ARG())
    GENERATE(ADDENTRY,addf,OPCODE_ADDF_ARG())
    GENERATE(ADDENTRY,subf,OPCODE_SUBF_ARG())
    GENERATE(ADDENTRY,mulf,OPCODE_MULF_ARG())
    GENERATE(ADDENTRY,divf,OPCODE_DIVF_ARG())
    GENERATE(ADDENTRY,incf,OPCODE_INCF_ARG())
    GENERATE(ADDENTRY,decf,OPCODE_DECF_ARG())
    
    GENERATE(ADDENTRY,eq,OPCODE_EQ_ARG())
    GENERATE(ADDENTRY,ne,OPCODE_NE_ARG())
    GENERATE(ADDENTRY,gt,OPCODE_GT_ARG())
    GENERATE(ADDENTRY,lt,OPCODE_LT_ARG())
    GENERATE(ADDENTRY,eqf,OPCODE_EQF_ARG())
    GENERATE(ADDENTRY,nef,OPCODE_NEF_ARG())
    GENERATE(ADDENTRY,gtf,OPCODE_GTF_ARG())
    GENERATE(ADDENTRY,ltf,OPCODE_LTF_ARG())

    GENERATE(ADDENTRY,and,OPCODE_AND_ARG())
    GENERATE(ADDENTRY,or,OPCODE_OR_ARG())
    GENERATE(ADDENTRY,not,OPCODE_NOT_ARG())
    
    GENERATE(ADDENTRY,jmp,OPCODE_JMP_ARG())
    GENERATE(ADDENTRY,jc,OPCODE_JC_ARG())
    GENERATE(ADDENTRY,lbl,OPCODE_LBL_ARG())
    GENERATE(ADDENTRY,call,OPCODE_CALL_ARG())
    GENERATE(ADDENTRY,ret,OPCODE_RET_ARG())
    
    GENERATE(ADDENTRY,sys,OPCODE_SYS_ARG())
    
    GENERATE(ADDENTRY,src,OPCODE_SRC_ARG())
    GENERATE(ADDENTRY,print_num,OPCODE_PRINT_NUM_ARG())
    GENERATE(ADDENTRY,halt,OPCODE_HALT_ARG())
}

#undef addEntry
#undef ADDENTRY

#define p(op_) case op_: return CHAOS_PP_STRINGIZE(op_);
#define PRINT(s, product, data) p(CHAOS_PP_SEQ_CONCAT(product))

static inline const char*
OpCodeStr(enum Opcode op)
{
    switch (op){
        GENERATE(PRINT,OPCODE_NOP,OPCODE_NOP_ARG())

        GENERATE(PRINT,OPCODE_MOV,OPCODE_MOV_ARG())
        GENERATE(PRINT,OPCODE_CPY,OPCODE_CPY_ARG())
        GENERATE(PRINT,OPCODE_SIZE,OPCODE_SIZE_ARG())
        GENERATE(PRINT,OPCODE_VAR,OPCODE_VAR_ARG())
        GENERATE(PRINT,OPCODE_LOC,OPCODE_LOC_ARG())
        GENERATE(PRINT,OPCODE_ALLC,OPCODE_ALLC_ARG())
        GENERATE(PRINT,OPCODE_PUSH,OPCODE_PUSH_ARG())
        GENERATE(PRINT,OPCODE_POP,OPCODE_POP_ARG())
        GENERATE(PRINT,OPCODE_LTOF,OPCODE_LTOF_ARG())
        GENERATE(PRINT,OPCODE_FTOL,OPCODE_FTOL_ARG())
        
        GENERATE(PRINT,OPCODE_ADD,OPCODE_ADD_ARG())
        GENERATE(PRINT,OPCODE_SUB,OPCODE_SUB_ARG())
        GENERATE(PRINT,OPCODE_MUL,OPCODE_MUL_ARG())
        GENERATE(PRINT,OPCODE_DIV,OPCODE_DIV_ARG())
        GENERATE(PRINT,OPCODE_MOD,OPCODE_MOD_ARG())
        GENERATE(PRINT,OPCODE_INC,OPCODE_INC_ARG())
        GENERATE(PRINT,OPCODE_DEC,OPCODE_DEC_ARG())
        GENERATE(PRINT,OPCODE_ADDF,OPCODE_ADDF_ARG())
        GENERATE(PRINT,OPCODE_SUBF,OPCODE_SUBF_ARG())
        GENERATE(PRINT,OPCODE_MULF,OPCODE_MULF_ARG())
        GENERATE(PRINT,OPCODE_DIVF,OPCODE_DIVF_ARG())
        GENERATE(PRINT,OPCODE_INCF,OPCODE_INCF_ARG())
        GENERATE(PRINT,OPCODE_DECF,OPCODE_DECF_ARG())
        
        GENERATE(PRINT,OPCODE_EQ,OPCODE_EQ_ARG())
        GENERATE(PRINT,OPCODE_NE,OPCODE_NE_ARG())
        GENERATE(PRINT,OPCODE_GT,OPCODE_GT_ARG())
        GENERATE(PRINT,OPCODE_LT,OPCODE_LT_ARG())
        GENERATE(PRINT,OPCODE_EQF,OPCODE_EQF_ARG())
        GENERATE(PRINT,OPCODE_NEF,OPCODE_NEF_ARG())
        GENERATE(PRINT,OPCODE_GTF,OPCODE_GTF_ARG())
        GENERATE(PRINT,OPCODE_LTF,OPCODE_LTF_ARG())

        GENERATE(PRINT,OPCODE_AND,OPCODE_AND_ARG())
        GENERATE(PRINT,OPCODE_OR,OPCODE_OR_ARG())
        GENERATE(PRINT,OPCODE_NOT,OPCODE_NOT_ARG())
        
        GENERATE(PRINT,OPCODE_JMP,OPCODE_JMP_ARG())
        GENERATE(PRINT,OPCODE_JC,OPCODE_JC_ARG())
        GENERATE(PRINT,OPCODE_LBL,OPCODE_LBL_ARG())
        GENERATE(PRINT,OPCODE_CALL,OPCODE_CALL_ARG())
        GENERATE(PRINT,OPCODE_RET,OPCODE_RET_ARG())
        
        GENERATE(PRINT,OPCODE_SYS,OPCODE_SYS_ARG())

        GENERATE(PRINT,OPCODE_SRC,OPCODE_SRC_ARG())
        GENERATE(PRINT,OPCODE_PRINT_NUM,OPCODE_PRINT_NUM_ARG())
        GENERATE(PRINT,OPCODE_HALT,OPCODE_HALT_ARG())
    }
}

#undef p
#undef PRINT

#endif
